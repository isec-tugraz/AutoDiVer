import numpy as np


P128 = np.array((0, 33, 66, 99, 96, 1, 34, 67, 64, 97, 2, 35, 32, 65, 98, 3, 4, 37, 70,
                103, 100, 5, 38, 71, 68, 101, 6, 39, 36, 69, 102, 7, 8, 41, 74, 107,
                104, 9, 42, 75, 72, 105, 10, 43, 40, 73, 106, 11, 12, 45, 78, 111, 108,
                13, 46, 79, 76, 109, 14, 47, 44, 77, 110, 15, 16, 49, 82, 115, 112, 17,
                50, 83, 80, 113, 18, 51, 48, 81, 114, 19, 20, 53, 86, 119, 116, 21, 54,
                87, 84, 117, 22, 55, 52, 85, 118, 23, 24, 57, 90, 123, 120, 25, 58, 91,
                88, 121, 26, 59, 56, 89, 122, 27, 28, 61, 94, 127, 124, 29, 62, 95, 92,
                125, 30, 63, 60, 93, 126, 31))

P64 = np.array((0, 17, 34, 51, 48, 1, 18, 35, 32, 49, 2, 19, 16, 33, 50, 3,
                4, 21, 38, 55, 52, 5, 22, 39, 36, 53, 6, 23, 20, 37, 54, 7,
                8, 25, 42, 59, 56, 9, 26, 43, 40, 57, 10, 27, 24, 41, 58, 11,
                12, 29, 46, 63, 60, 13, 30, 47, 44, 61, 14, 31, 28, 45, 62, 15))



IP128 = np.full_like(P128, -1)
IP64 = np.full_like(P64, -1)

IP128[P128] = np.arange(len(P128), dtype=P128.dtype)
IP64[P64] = np.arange(len(P64), dtype=P64.dtype)

IP128, P128 = P128, IP128
IP64, P64 = P64, IP64


DDT = np.array([[16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
                [ 0,  0,  0,  0,  0,  2,  2,  0,  2,  2,  2,  2,  2,  0,  0,  2],
                [ 0,  0,  0,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  2,  2,  0],
                [ 0,  0,  0,  0,  0,  2,  2,  0,  2,  0,  0,  2,  2,  2,  2,  2],
                [ 0,  0,  0,  2,  0,  4,  0,  6,  0,  2,  0,  0,  0,  2,  0,  0],
                [ 0,  0,  2,  0,  0,  2,  0,  0,  2,  0,  0,  0,  2,  2,  2,  4],
                [ 0,  0,  4,  6,  0,  0,  0,  2,  0,  0,  2,  0,  0,  0,  2,  0],
                [ 0,  0,  2,  0,  0,  2,  0,  0,  2,  2,  2,  4,  2,  0,  0,  0],
                [ 0,  0,  0,  4,  0,  0,  0,  4,  0,  0,  0,  4,  0,  0,  0,  4],
                [ 0,  2,  0,  2,  0,  0,  2,  2,  2,  0,  2,  0,  2,  2,  0,  0],
                [ 0,  4,  0,  0,  0,  0,  4,  0,  0,  2,  2,  0,  0,  2,  2,  0],
                [ 0,  2,  0,  2,  0,  0,  2,  2,  2,  2,  0,  0,  2,  0,  2,  0],
                [ 0,  0,  4,  0,  4,  0,  0,  0,  2,  0,  2,  0,  2,  0,  2,  0],
                [ 0,  2,  2,  0,  4,  0,  0,  0,  0,  0,  2,  2,  0,  2,  0,  2],
                [ 0,  4,  0,  0,  4,  0,  0,  0,  2,  2,  0,  0,  2,  2,  0,  0],
                [ 0,  2,  2,  0,  4,  0,  0,  0,  0,  2,  0,  2,  0,  0,  2,  2]],
               dtype=np.uint8)

GIFT_RC = bytearray.fromhex(
    "0103070f1f3e3d3b372f1e3c3933270e1d3a352b162c"
    "18302102050b172e1c383123060d1b362d1a34291224"
    "081122040913260c1932250a152a14281020"
)



def unpack_bits(cell):
    cellBin = [0 for _ in range(4)]
    for j in range(4):
        cellBin[j] = (cell >> j) & 0x01
    return cellBin

def pack_bits(cellBin):
    cell = 0;
    for j in range(4):
        cell = (cell << 1) | cellBin[3 - j];
    return cell

def unpack_bits_arr(A):
    B = []
    for a in A:
        B = B + unpack_bits(a)
    return B
def pack_bits_arr(A):
    B = []
    for i in range(len(A)//4):
        b = A[4*i:4*(i+1)]
        # print(b)
        B.append(pack_bits(b))
    B = np.asarray(B, dtype = np.uint8)
    return B


def bit_perm(arr: np.ndarray, permutation: np.ndarray) -> np.ndarray:
    res = np.asarray(unpack_bits_arr(arr))
    permuted = res[permutation]
    res = pack_bits_arr(permuted)
    return res

# def bit_perm(arr):
#     bits = unpack_bits(arr)
#     pemuted = bits[..., P128]
#     res = pack_bits(pemuted)
#     return res
