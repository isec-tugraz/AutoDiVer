#!/usr/bin/env python3
"""
Differential Characteristic from the 2015 CTRSA paper "Cryptanalysis of Ascon" [1, Table 6].
The last round of the characteristic was "untruncated".

[1] https://doi.org/10.1007/978-3-319-16715-2_20
"""

from __future__ import annotations

from pathlib import Path
import numpy as np

from typing import Any

ascon_ddt = np.array(bytearray.fromhex(
    "2000000000000000000000000000000000000000000000000000000000000000"
    "0000000000000000000400040004000400000000000000000400040004000400"
    "0000000000000000000000000000000000040004000400040004000400040004"
    "0004000000040000000400000004000004000000040000000400000004000000"
    "0000000000000800000000000000080000000000000008000000000000000800"
    "0000000000000000000000000000000000040004040004000400040000040004"
    "0002000200020002000200020002000200020002000200020002000200020002"
    "0000040400000404000004040000040400000000000000000000000000000000"
    "0000000000000404000000000000040400000000000004040000000000000404"
    "0002000202000200020002000002000202000200000200020002000202000200"
    "0002020002000002000202000200000200020200020000020002020002000002"
    "0000020200000202000002020000020200000202000002020000020200000202"
    "0008000000000000080000000000000008000000000000000008000000000000"
    "0002000200020002020002000200020002000200020002000002000200020002"
    "0004040004000004000000000000000000040400040000040000000000000000"
    "0000000000000000040400000404000000000000000000000404000004040000"
    "0000000000000000000800080000000000000000000000000800080000000000"
    "0000000000000000000000000000000000080008000800080000000000000000"
    "0002000200020002000200020002000202000200020002000200020002000200"
    "0000080008000000000008000800000000000000000000000000000000000000"
    "0000000004040404000000000404040400000000000000000000000000000000"
    "0000000000040004000400040000000000040004000000000000000000040004"
    "0000000000000000000000000000000002020202020202020202020202020202"
    "0000040004000000000004000400000000000400040000000000040004000000"
    "0000000002020202000000000202020200000000020202020000000002020202"
    "0000000400000400040000000004000004000000000400000000000400000400"
    "0002020000020200020000020200000200020200000202000200000202000002"
    "0000020202020000000002020202000000000202020200000000020202020000"
    "0004000400000000040004000000000004000400000000000004000400000000"
    "0000000400040000040000000000040004000000000004000000000400040000"
    "0000000000000000020202020202020200000000000000000202020202020202"
    "0000040404040000000000000000000000000404040400000000000000000000"
)).reshape(32, 32)


def ascon_inv_linear_layer(inp: np.ndarray[Any, np.dtype[np.uint64]]) -> np.ndarray[Any, np.dtype[np.uint64]]:
    rotations = [
        [0, 3, 6, 9, 11, 12, 14, 15, 17, 18, 19, 21, 22, 24, 25, 27, 30, 33, 36, 38, 39, 41, 42, 44, 45, 47, 50, 53, 57, 60, 63],
        [0, 1, 2, 3, 4, 8, 11, 13, 14, 16, 19, 21, 23, 24, 25, 27, 28, 29, 30, 35, 39, 43, 44, 45, 47, 48, 51, 53, 54, 55, 57, 60, 61],
        [0, 2, 4, 6, 7, 10, 11, 13, 14, 15, 17, 18, 20, 23, 26, 27, 28, 32, 34, 35, 36, 37, 40, 42, 46, 47, 52, 58, 59, 60, 61, 62, 63],
        [1, 2, 4, 6, 7, 9, 12, 17, 18, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 42, 44, 47, 48, 49, 53, 58, 61, 63],
        [0, 1, 2, 3, 4, 5, 9, 10, 11, 13, 16, 20, 21, 22, 24, 25, 28, 29, 30, 31, 35, 36, 40, 41, 44, 45, 46, 47, 48, 50, 53, 55, 60, 61, 63],
    ]
    rotations = [np.array(rot, dtype=np.uint64) for rot in rotations]

    output = np.zeros_like(inp)
    for i in range(5):
        for rot in rotations[i]:
            output[i] ^= (inp[i] >> rot) | (inp[i] << (np.uint64(64) - rot))

    return output

def get_best_output_difference(sbox_in: np.ndarray[Any, np.dtype[np.uint64]]):
    assert sbox_in.shape == (5,)
    assert sbox_in.dtype == np.uint64

    sbox_out = np.zeros(5, dtype=np.uint64)

    for sbox_idx in range(64):
        input_diff = (sbox_in >> sbox_idx) & 1
        input_diff = input_diff << np.arange(5, dtype=np.uint64)[::-1]
        input_diff = np.bitwise_or.reduce(input_diff)

        output_diff = ascon_ddt[input_diff].argmax().astype(np.uint64)
        for i in range(5):
            sbox_out[i] |= ((output_diff >> np.uint64(4 - i)) & np.uint64(1)) << np.uint64(sbox_idx)
    return sbox_out


if __name__ == '__main__':
    sbox_in = np.array(bytearray.fromhex(
        "8000000000000000" "0000000000000000" "0000000000000000" "0000000000000000" "0000000000000000"
        "8000100800000000" "8000000001000004" "0000000000000000" "0000000000000000" "0000000000000000"
        "8000000002000080" "9002904800000000" "d200000001840006" "0102000001004084" "0000000000000000"
    )).reshape(3, 40).view(np.uint64).byteswap()

    sbox_out = np.zeros_like(sbox_in)

    for i in range(len(sbox_in) - 1):
        sbox_out[i] = ascon_inv_linear_layer(sbox_in[i + 1])

    sbox_out[-1] = get_best_output_difference(sbox_in[-1])


    script_file = Path(__file__)
    dst_file = script_file.with_suffix('.npz')
    print(f'Writing to {dst_file}')
    np.savez(dst_file, sbox_in=sbox_in, sbox_out=sbox_out)

    numrounds = len(sbox_in)
    for i in range(4, numrounds):
        dst_file = script_file.with_name(script_file.stem + f'_r{i}.npz')
        print(f'Writing to {dst_file}')
        np.savez(dst_file, sbox_in=sbox_in[:i], sbox_out=sbox_out[:i])
