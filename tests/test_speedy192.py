from random import seed, randint
from differential_verification.cipher_model import DifferentialCharacteristic, count_solutions
from differential_verification.speedy192.speedy192_model import Speedy192
from differential_verification.speedy192.speedy_cipher import speedy192_enc
from differential_verification.speedy192.util import Add, prepare_round_keys
import numpy as np
import pytest
from sat_toolkit.formula import CNF
from icecream import ic
#0th bit is the LSB
def print_state(key, s = "state"):
    print(s, end = ": " )
    for k in key:
        # print(k)
        assert k <= 64
        print(hex(k)[2:].zfill(2), end = " ")
    print("")
def str_state(S):
    state = [int(S[i:i+2],16) for i in range(0, len(S), 2)]
    print(state)
    return np.asarray(state, dtype=np.uint8)
speedy192_testvectors = [
    ("281329230905040703240e0228273c2629001a023c3f3a1f3d28002834243f1b", "1d24310f182513212f3f08083a15212210283e2e340116043d02013a1f281137", "3b13340e281131021e3d0c251c0d3d01312f35263a3b3d09052e1d203b102503"),
]
speedy192_testvectors = [
    (str_state(pt), str_state(key), str_state(ct_ref)) for pt, key, ct_ref in speedy192_testvectors
]
@pytest.mark.parametrize("pt,key,ct_ref", speedy192_testvectors)
def test_tv(pt, key, ct_ref):
    ct = speedy192_enc(pt, key, 7)
    assert np.all(ct == ct_ref)
def test_zero_characteristic():
    seed("test_speedy192::test_zero_characteristic")
    numrounds = 2
    sbi_delta = sbo_delta = np.zeros((2*numrounds, 32), dtype=np.uint8)
    char = DifferentialCharacteristic(sbi_delta, sbo_delta)
    speedy = Speedy192(char)
    # num_solutions = count_solutions(speedy.cnf, epsilon=0.8, delta=0.2, verbosity=0)
    # assert num_solutions == 1 << (192 + 192)
    for bit_var in speedy.key.flatten():
        speedy.cnf += CNF([bit_var * (-1)**randint(0,1), 0])
        # speedy.cnf += CNF([-bit_var, 0])
    # num_solutions = count_solutions(speedy.cnf, epsilon=0.8, delta=0.2, verbosity=0)
    # assert num_solutions == 1 << 192
    for bit_var in speedy.sbox_out[0, 1:].flatten():
        speedy.cnf += CNF([bit_var * (-1)**randint(0,1), 0])
        # speedy.cnf += CNF([-bit_var, 0])
    for bit_var in speedy.sbox_out[0, :1].flatten():
        speedy.cnf += CNF([bit_var * (-1)**randint(0,1), 0])
        # speedy.cnf += CNF([bit_var, 0])
    model = speedy.solve(seed=9732)
    key = model.key[0] # type: ignore
    sbi = model.sbox_in # type: ignore
    sbo = model.sbox_out # type: ignore
    mco = model.mc_out # type: ignore
    assert np.all(speedy.sbox[sbi[:speedy.num_rounds]] == sbo)
    print_state(key)
    pt = sbi[0] ^ key
    print_state(pt)
    round_keys = prepare_round_keys(key)
    for i in range(speedy.num_rounds_full):
        print_state(round_keys[i], "rkeys{}".format(i))
    #Note that inside the model ther is not key addition at the start and end
    ref = speedy192_enc(pt, key, numrounds)
    ref = Add(ref, round_keys[numrounds])
    out = sbo[2*(numrounds-1) + 1]
    print_state(ref, "ref")
    print_state(out, "sbo")
    assert np.all(ref == out)
    num_solutions = count_solutions(speedy.cnf, epsilon=0.8, delta=0.2, verbosity=0)
    assert num_solutions == 1
def test_nonzero_characteristic():
    char =( (( 0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0),
             (0x10,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0)),
            ((0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10),
             (0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4)),
            ((0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4),
             (0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11,0x0,0x22,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10)),
            ((0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2,0x10,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0),
             (0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0)) )
    numrounds = len(char)//2  #Number of full rounds
    sbi_delta = np.array([[x for x in in_out[0]] for in_out in char], dtype=np.uint8)
    sbo_delta = np.array([[x for x in in_out[1]] for in_out in char], dtype=np.uint8)
    char = DifferentialCharacteristic(sbi_delta, sbo_delta)
    speedy = Speedy192(char)
    print(f'ddt probability: 2^{char.log2_ddt_probability(speedy.ddt):.1f}')
    with pytest.raises(ValueError):
        model = speedy.solve(seed=5612)
def test_nonzero_characteristic_sat():
    char =( ((0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00),
             (0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00)),
             ((0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x08,0x10),
              (0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x02,0x00,0x07,0x08)),
              ((0x02,0x24,0x00,0x0a,0x09,0x02,0x24,0x00,0x08,0x02,0x09,0x02,0x24,0x00,0x08,0x02,0x09,0x02,0x24,0x02,0x01,0x02,0x24,0x02,0x03,0x0b,0x26,0x24,0x08,0x08,0x02,0x09),
              (0x09,0x28,0x00,0x17,0x0d,0x04,0x18,0x00,0x08,0x0a,0x19,0x12,0x16,0x00,0x06,0x03,0x12,0x08,0x18,0x02,0x24,0x04,0x0b,0x08,0x0d,0x31,0x31,0x30,0x30,0x09,0x02,0x0c)),
              ((0x04,0x24,0x1c,0x00,0x08,0x13,0x08,0x0a,0x0a,0x14,0x13,0x16,0x02,0x00,0x00,0x1a,0x08,0x15,0x06,0x01,0x29,0x0d,0x08,0x00,0x11,0x30,0x32,0x39,0x24,0x08,0x09,0x0b),
              (0x24,0x0b,0x32,0x00,0x1d,0x1b,0x04,0x15,0x01,0x20,0x3a,0x1e,0x08,0x00,0x00,0x37,0x10,0x1a,0x0a,0x03,0x1c,0x13,0x08,0x00,0x13,0x06,0x11,0x29,0x16,0x07,0x05,0x23)),
          )
    char = ( ((0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00),
            (0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00)),
           ((0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00),
            (0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00)),
            ((0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x02),
            (0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x04)),
            ((0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00),
            (0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00)),)
    numrounds = len(char)//2  #Number of full rounds
    sbi_delta = np.array([[x for x in in_out[0]] for in_out in char], dtype=np.uint8)
    sbo_delta = np.array([[x for x in in_out[1]] for in_out in char], dtype=np.uint8)
    char = DifferentialCharacteristic(sbi_delta, sbo_delta)
    speedy = Speedy192(char)
    print(f'ddt probability: 2^{char.log2_ddt_probability(speedy.ddt):.1f}')
    model = speedy.solve(seed=8291)
    key = model.key[0] # type: ignore
    sbi = model.sbox_in # type: ignore
    sbo = model.sbox_out # type: ignore
    mco = model.mc_out # type: ignore
    assert np.all(speedy.sbox[sbi[:speedy.num_rounds]] == sbo)
    print_state(key, "key")
    pt = sbi[0] ^ key
    print_state(pt, "pt")
    round_keys = prepare_round_keys(key)
    for i in range(speedy.num_rounds_full):
        print_state(round_keys[i], "rkeys{}".format(i))
    #Note that inside the model ther is not key addition at the start and end
    ref = speedy192_enc(pt, key, numrounds)
    ref = ref ^ round_keys[numrounds]
    out = sbo[2*(numrounds-1) + 1]
    print_state(ref, "ref")
    print_state(out, "sbo")
    assert np.all(ref == out)
    ref_xor = speedy192_enc(pt ^ sbi_delta[0], key, numrounds)
    ref_xor = ref_xor ^ round_keys[numrounds]
    found_diff = ref ^ ref_xor
    print_state(found_diff)
    expected_diff = sbo_delta[2*(numrounds-1) + 1]
    print_state(expected_diff)
    assert np.all(expected_diff == found_diff)
if __name__ == "__main__":
    test_zero_characteristic()
    test_nonzero_characteristic()
    test_nonzero_characteristic_sat()